// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  dp String?
  bio String?
  userID String @id @default(uuid())
  username String @unique
  email String @unique
  password String
  isVarified Boolean @default(false)
  posts Post[]
  upvotes Upvote[]
  comments Comment[]         
  myNotifications notification[]   @relation("toUser")
  notificationsto notification[] @relation("fromUser")

  OwnedRooms Rooms[] @relation("creatorUserId")
  Room EnrolledRooms[] @relation("UserId")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model UserVarify{
  userID String @id @unique
  otp String
  createdAt BigInt
  expiresAt BigInt
}
model Post{
  id String @id @unique @default(uuid())
  topic String?
  title String 
  body String
  img String?
  userId String
  user User @relation(fields: [userId], references: [userID],onDelete: Cascade,onUpdate: Cascade)

  upvotes Upvote[]
  comments Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  //For Room
  subCommunity String? 
  room Rooms? @relation(fields: [subCommunity],references: [title],onDelete: Cascade)
}
model Comment{
  id Int @id @unique @default(autoincrement())
  body String
  postId String
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  userId String
  user User @relation(fields: [userId],references: [userID],onDelete: Cascade,onUpdate: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  parent Comment? @relation("ParentChild",fields: [parentId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  child Comment[] @relation("ParentChild")
  parentId Int?

  //Upvotes
  upvotes Upvote[]
}
model Upvote{
  id String @id @default(uuid())
  upvotes Int @default(0)
  postId String
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  userId String 
  user User @relation(fields: [userId],references: [userID],onDelete: Cascade,onUpdate: Cascade)
  createAt DateTime @default(now())
  
  commentId Int?
  comment Comment? @relation(fields: [commentId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  @@unique([id,userId])
}

model notification{
  id String @id @default(uuid())
  title String 
  body String?
  createdAt DateTime @default(now())
  visited Boolean @default(false)
  postId String?

  toUser String
  user User @relation("toUser",fields: [toUser],references: [userID],onDelete: Cascade,onUpdate: Cascade)
  
  fromUser String
  user2 User @relation("fromUser",fields: [fromUser],references: [userID],onDelete: Cascade,onUpdate: Cascade)
}

model Rooms{
  id String @id @default(uuid())
  title String @unique
  desc String?
  bgImg String?
  img String?
  privateRoom Boolean
  CreatorId String

  createdAt DateTime @default(now())
  user User @relation("creatorUserId",fields: [CreatorId],references: [userID],onDelete: Cascade,onUpdate: Cascade)
  UsersEnrolled EnrolledRooms[] @relation("RoomsId")
  
  posts Post[] 
  @@unique([id,title])
}

model EnrolledRooms{
  id Int @id @default(autoincrement())
  userId String
  RoomId String
  joined Boolean
  
  user User @relation("UserId",fields: [userId],references: [userID],onDelete: Cascade,onUpdate: Cascade)
  room Rooms @relation("RoomsId",fields: [RoomId],references: [id],onDelete: Cascade,onUpdate: Cascade)

  @@unique([userId,RoomId])
}